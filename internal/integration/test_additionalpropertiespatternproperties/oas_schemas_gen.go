// Code generated by ogen, DO NOT EDIT.

package api

type AliveFlexData struct {
	HelloWorld      OptString `json:"hello_world"`
	AdditionalProps AliveFlexDataAdditional
	// Pattern: "^pat-.*".
	Pattern0Props AliveFlexDataPattern0
}

// GetHelloWorld returns the value of HelloWorld.
func (s *AliveFlexData) GetHelloWorld() OptString {
	return s.HelloWorld
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *AliveFlexData) GetAdditionalProps() AliveFlexDataAdditional {
	return s.AdditionalProps
}

// GetPattern0Props returns the value of Pattern0Props.
func (s *AliveFlexData) GetPattern0Props() AliveFlexDataPattern0 {
	return s.Pattern0Props
}

// SetHelloWorld sets the value of HelloWorld.
func (s *AliveFlexData) SetHelloWorld(val OptString) {
	s.HelloWorld = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *AliveFlexData) SetAdditionalProps(val AliveFlexDataAdditional) {
	s.AdditionalProps = val
}

// SetPattern0Props sets the value of Pattern0Props.
func (s *AliveFlexData) SetPattern0Props(val AliveFlexDataPattern0) {
	s.Pattern0Props = val
}

type AliveFlexDataAdditional map[string]string

func (s *AliveFlexDataAdditional) init() AliveFlexDataAdditional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type AliveFlexDataPattern0 map[string]string

func (s *AliveFlexDataPattern0) init() AliveFlexDataPattern0 {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// AliveOK is response for Alive operation.
type AliveOK struct{}

// NewOptAliveFlexData returns new OptAliveFlexData with value set to v.
func NewOptAliveFlexData(v AliveFlexData) OptAliveFlexData {
	return OptAliveFlexData{
		Value: v,
		Set:   true,
	}
}

// OptAliveFlexData is optional AliveFlexData.
type OptAliveFlexData struct {
	Value AliveFlexData
	Set   bool
}

// IsSet returns true if OptAliveFlexData was set.
func (o OptAliveFlexData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAliveFlexData) Reset() {
	var v AliveFlexData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAliveFlexData) SetTo(v AliveFlexData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAliveFlexData) Get() (v AliveFlexData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAliveFlexData) Or(d AliveFlexData) AliveFlexData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
