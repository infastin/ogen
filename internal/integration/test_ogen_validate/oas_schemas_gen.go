// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/jx"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/Error
type Error struct {
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// NewOptUserOther returns new OptUserOther with value set to v.
func NewOptUserOther(v UserOther) OptUserOther {
	return OptUserOther{
		Value: v,
		Set:   true,
	}
}

// OptUserOther is optional UserOther.
type OptUserOther struct {
	Value UserOther
	Set   bool
}

// IsSet returns true if OptUserOther was set.
func (o OptUserOther) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserOther) Reset() {
	var v UserOther
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserOther) SetTo(v UserOther) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserOther) Get() (v UserOther, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserOther) Or(d UserOther) UserOther {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/User
type User struct {
	Name  string       `json:"name"`
	Age   int          `json:"age"`
	Email string       `json:"email"`
	Other OptUserOther `json:"other"`
}

// GetName returns the value of Name.
func (s *User) GetName() string {
	return s.Name
}

// GetAge returns the value of Age.
func (s *User) GetAge() int {
	return s.Age
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() string {
	return s.Email
}

// GetOther returns the value of Other.
func (s *User) GetOther() OptUserOther {
	return s.Other
}

// SetName sets the value of Name.
func (s *User) SetName(val string) {
	s.Name = val
}

// SetAge sets the value of Age.
func (s *User) SetAge(val int) {
	s.Age = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val string) {
	s.Email = val
}

// SetOther sets the value of Other.
func (s *User) SetOther(val OptUserOther) {
	s.Other = val
}

type UserOther map[string]jx.Raw

func (s *UserOther) init() UserOther {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}
